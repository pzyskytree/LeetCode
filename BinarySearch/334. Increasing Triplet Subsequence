## 334. Increasing Triplet Subsequence

Medium

Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:

> Return true if there exists *i, j, k* 
> such that *arr[i]* < *arr[j]* < *arr[k]* given 0 ≤ *i* < *j* < *k* ≤ *n*-1 else return false.

**Note:** Your algorithm should run in O(*n*) time complexity and O(*1*) space complexity.

**Example 1:**

```
Input: [1,2,3,4,5]
Output: true
```

**Example 2:**

```
Input: [5,4,3,2,1]
Output: false
```

**Solution1:**

```java
//Use the first two elements to store the smallest ending poiting for each length of 
// increasing sequence.
//Time O(N) Space O(1)
class Solution {
    public boolean increasingTriplet(int[] nums) {
        if (nums == null || nums.length < 3)
            return false;
        int n = nums.length, len = 1;
        for (int i = 1; i < n; i++){
            if (nums[i] <= nums[0]){
                nums[0] = nums[i];
            }else if (len == 1 || nums[i] <= nums[1]){
                len = 2;
                nums[1] = nums[i]; 
            }else{
                return true;
            }
        }
        return false;
    }
}
```
